class Semaforo

instance variables
  luzVerde : Luz;
  luzAmarilla : Luz;
  luzRoja : Luz;
  public luzActual : Luz;

-- inv luzVerde.getDuracion() > luzAmarilla.getDuracion() and luzVerde.getDuracion() > luzRoja.getDuracion();

operations

  -- Métodos auxiliares para validar condiciones 
  --private validarInvariantes:() ==> bool
  --validarInvariantes() ==
    --return luzVerde.getDuracion() > luzAmarilla.getDuracion() and
           --luzVerde.getDuracion() > luzRoja.getDuracion();
  
  private validarPrecondicionesConstructor: Luz * Luz * Luz ==> bool
  validarPrecondicionesConstructor(lv, la, lr) ==
    return lv.getDuracion() > la.getDuracion() and
           lv.getDuracion() > lr.getDuracion() and
           lv.getDuracion() > 0 and la.getDuracion() > 0 and lr.getDuracion() > 0;

  private validarPrecondicionCambioLuz: Luz ==> bool
  validarPrecondicionCambioLuz(nuevaLuz) ==
    return nuevaLuz.getDuracion() > 0;

  -- Constructor para crear un semáforo
  public Semaforo: Luz * Luz * Luz ==> Semaforo
  Semaforo(lv, la, lr) ==
  (
    if validarPrecondicionesConstructor(lv, la, lr) then
      luzVerde := lv;
      luzAmarilla := la;
      luzRoja := lr;
      luzActual := lv;
     -- Agregar manejo de error si no se cumple el invariante
    --else 
      --skip; -- Manejo de error si las precondiciones no se cumplen
  );

  -- Cambiar la luz actual del semáforo
  public cambiarLuz: Luz ==> ()
  cambiarLuz(nuevaLuz) ==
  (
    if validarPrecondicionCambioLuz(nuevaLuz) then
      luzActual := nuevaLuz;
  );

  -- Ajustar los tiempos de las luces en un semáforo
  public ajustarTiempos: nat * nat * nat ==> ()
  ajustarTiempos(tiempoVerde, tiempoAmarillo, tiempoRojo) ==
  (
    luzVerde.setDuracion(tiempoVerde);
    luzAmarilla.setDuracion(tiempoAmarillo);
    luzRoja.setDuracion(tiempoRojo);
  );

  -- Obtener la luz actual del semáforo
  public getLuzActual: () ==> Luz
  getLuzActual() ==
    return luzActual;

end Semaforo
