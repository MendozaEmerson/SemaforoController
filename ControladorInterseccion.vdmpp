class ControladorInterseccion

instance variables
  semaforos : seq of Semaforo := [];
  semaforoActivoIndex : nat := 1;
  trafico : seq of nat := [];
  emergencia : seq of bool := []; 
  colores : Luz`Color;

  -- El indice debe estar en el rango valido
  inv semaforoActivoIndex >= 1 and semaforoActivoIndex <= len semaforos;
  -- La secuencia de tráfico debe tener el mismo tamaño que la secuencia de semáforos
  inv len trafico = len semaforos;

operations
  -- Constructor
  public ControladorInterseccion: seq of Semaforo * seq of nat ==> ControladorInterseccion
  ControladorInterseccion(semaforosIn, traff) == 
  (
    semaforos := semaforosIn;
    semaforoActivoIndex := 1;
    trafico := traff;
    emergencia := [false | i in set {1,...,len semaforosIn}];
    verificarEmergencias();
    setearSemaforos();
  )
  pre len semaforosIn > 0;

  -- Obtener el semáforo activo
  public getSemaforoActivo: () ==> Semaforo
  getSemaforoActivo() == return semaforos(semaforoActivoIndex);

  -- Cambiar al siguiente semáforo
  public siguienteSemaforo: () ==> ()
  siguienteSemaforo() == 
  (
    semaforoActivoIndex := if semaforoActivoIndex = len semaforos then 1 else semaforoActivoIndex + 1;
    verificarEmergencias();
    setearSemaforos();
    );

  -- Cambiar la luz del semáforo activo
  public cambiarLuzSemaforoActivo: Luz ==> ()
  cambiarLuzSemaforoActivo(nuevaLuz) == 
    semaforos(semaforoActivoIndex).cambiarLuz(nuevaLuz);

  -- Ajustar tiempos de todos los semáforos
  public ajustarTiemposTodos: seq of nat * seq of nat * seq of nat ==> ()
	ajustarTiemposTodos(tiemposVerde, tiemposAmarillo, tiemposRojo) ==
	(
	  -- Iterar sobre los semáforos
	  for i = 1 to len semaforos do
	  (
	    -- Asignar los nuevos tiempos de cada semáforo
	    semaforos(i).ajustarTiempos(tiemposVerde(i), tiemposAmarillo(i), tiemposRojo(i));
	  )
	)
	pre len tiemposVerde = len semaforos and
	    len tiemposAmarillo = len semaforos and
	    len tiemposRojo = len semaforos;
--Setear los demas semaforos  que no deberian estar activos  a Rojo
  private setearSemaforos: () ==> ()
  setearSemaforos() ==
  (
    for i=1 to len semaforos by 1 do (
      if i = semaforoActivoIndex then
        semaforos(i).cambiarLuz(new Luz(<Verde>, trafico(i)))
      else
        semaforos(i).cambiarLuz(new Luz(<Rojo>, trafico(i)))
        );
    );
    

      -- Verificar si hay una emergencia activa
  public verificarEmergencias: () ==> ()
  verificarEmergencias() ==
  (
    for i = 1 to len emergencia do
      if emergencia(i) then 
      (
        semaforoActivoIndex := i;
        setearSemaforos();
        return; -- Salir del método si se encuentra una emergencia
      );
  );

end ControladorInterseccion

